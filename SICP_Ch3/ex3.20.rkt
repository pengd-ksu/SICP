#lang sicp
(define (cons-v2 x y)
  (define (set-x! v) (set! x v))
  (define (set-y! v) (set! y v))
  (define (dispatch m)
    (cond ((eq? m 'car-v2) x)
          ((eq? m 'cdr-v2) y)
          ((eq? m 'set-car!-v2) set-x!)
          ((eq? m 'set-cdr!-v2) set-y!)
          (else (error "Undefined operation -- CONS" m))))
  dispatch)

(define (car-v2 z) (z 'car-v2))
(define (cdr-v2 z) (z 'cdr-v2))
(define (set-car!-v2 z new-value)
  ((z 'set-car!-v2) new-value)
  z)
(define (set-cdr!-v2 z new-value)
  ((z 'set-cdr!-v2) new-value)
  z)

(car-v2 (cons-v2 'w 'z))
(cdr-v2 (cons-v2 'w 'z))
(define a-pair (cons-v2 'w 'z))
(car-v2 (set-car!-v2 a-pair 'u))
(cdr-v2 (set-cdr!-v2 a-pair 'v))

(define x (cons-v2 1 2))
(define z (cons-v2 x x))
(set-car!-v2 (cdr-v2 z) 17)
(car-v2 x)